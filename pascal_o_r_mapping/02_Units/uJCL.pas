unit uJCL;
{                                                                               |
    Author: Jean SUZINEAU <Jean.Suzineau@wanadoo.fr>                            |
            partly as freelance: http://www.mars42.com                          |
        and partly as employee : http://www.batpro.com                          |
    Contact: gilles.doutre@batpro.com                                           |
                                                                                |
    Copyright 2014 Jean SUZINEAU - MARS42                                       |
    Copyright 2014 Cabinet Gilles DOUTRE - BATPRO                               |
                                                                                |
    This program is free software: you can redistribute it and/or modify        |
    it under the terms of the GNU Lesser General Public License as published by |
    the Free Software Foundation, either version 3 of the License, or           |
    (at your option) any later version.                                         |
                                                                                |
    This program is distributed in the hope that it will be useful,             |
    but WITHOUT ANY WARRANTY; without even the implied warranty of              |
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               |
    GNU Lesser General Public License for more details.                         |
                                                                                |
    You should have received a copy of the GNU Lesser General Public License    |
    along with this program.  If not, see <http://www.gnu.org/licenses/>.       |
                                                                                |
|                                                                               }

interface

uses
    JCLDebug,
    uClean,
    ufAccueil_Erreur,
  SysUtils, Classes;

{$IFDEF FPC}
function DumpCallStack: String;
function DumpExceptionCallStack( E: Exception): String;
{$ENDIF}

procedure uJCL_StackTrace( _Contexte: String; _E: Exception;
                           _Message_Utilisateur: String= 'Erreur système');

implementation

{$IFDEF FPC}
{taken from Freepascal documentation}
function DumpCallStack: String;
var
  I: Longint;
  prevbp: Pointer;
  CallerFrame,
  CallerAddress,
  bp: Pointer;
  Report: string;
const
  MaxDepth = 20;
begin
      Report := '';
      bp := get_frame;
      // This trick skip SendCallstack item
      // bp:= get_caller_frame(get_frame);
      try
        prevbp := bp - 1;
        I := 0;
        while bp > prevbp do begin
           CallerAddress := get_caller_addr(bp);
           CallerFrame := get_caller_frame(bp);
           if (CallerAddress = nil) then
             Break;
           Report := Report + BackTraceStrFunc(CallerAddress) + LineEnding;
           Inc(I);
           if (I >= MaxDepth) or (CallerFrame = nil) then
             Break;
           prevbp := bp;
           bp := CallerFrame;
         end;
       except
         { prevent endless dump if an exception occured }
       end;
       Result:= Report;
end;

{taken from Freepascal documentation}
function DumpExceptionCallStack( E: Exception): String;
var
   I: Integer;
   Frames: PPointer;
   Report: string;
begin
     Report := 'Program exception! ' + LineEnding +
       'Stacktrace:' + LineEnding + LineEnding;
     if E <> nil then begin
       Report := Report + 'Exception class: ' + E.ClassName + LineEnding +
       'Message: ' + E.Message + LineEnding;
     end;
     Report := Report + BackTraceStrFunc(ExceptAddr);
     Frames := ExceptFrames;
     for I := 0 to ExceptFrameCount - 1 do
       Report := Report + LineEnding + BackTraceStrFunc(Frames[I]);

     Result:= Report;
end;
{$ENDIF}
procedure uJCL_StackTrace( _Contexte: String; _E: Exception;
                           _Message_Utilisateur: String= 'Erreur système');
var
   sl: TStringList;
   Message_Exception: String;
   Message_Utilisateur: String;
begin
     if _E = nil
     then
         Message_Exception:= 'Exception : nil'
     else
         Message_Exception:= 'Exception '+_E.Classname+#13#10+_E.Message;
     Message_Utilisateur:= _Message_Utilisateur+#13#10 +Message_Exception;
     sl:= TStringList.Create;

     sl.Add(  _Contexte +#13#10 +Message_Exception);
     JclLastExceptStackListToStrings( sl, True, True, True, True);

     {$IFDEF FPC}
     sl.Add(  'Pile d''appels Freepascal'#13#10 +DumpExceptionCallStack( _E));
     {$ENDIF}

     uClean_Log( sl.Text);
     fAccueil_Erreur( sl.Text, Message_Utilisateur);

     Free_nil( sl);
end;

initialization
              // Enable raw mode (default mode uses stack frames which aren't always generated by the compiler)
              Include(JclStackTrackingOptions, stRawMode);
              // Disable stack tracking in dynamically loaded modules (it makes stack tracking code a bit faster)
              Include(JclStackTrackingOptions, stStaticModuleList);

              // Initialize Exception tracking
              JclStartExceptionTracking;
finalization
              // Uninitialize Exception tracking
              JclStopExceptionTracking;
end.
